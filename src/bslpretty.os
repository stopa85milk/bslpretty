
#Использовать cmdline
#Использовать osparser

Функция Настройки()
	
	Настройки = Новый Структура();
	
	// необходим ли интерактивный режим работы?
	Настройки.Вставить("ИнтерактивныйРежимРаботы", Истина);
	
	// Для использования утилиты Diff нужно вызвать вот такую команду. Количество ковычек сводит с ума
	// > cmd /K ""C:\Program Files\Git\usr\bin\diff.exe" -C 3 --color=auto "c:\git\bslpretty\src\bslpretty.os" "C:\Users\Сергей Якушев\AppData\Local\Temp\d14i4tyz4bv.tmp""
	Настройки.Вставить("УтилитаСравнения", "cmd /K """"C:\Program Files\Git\usr\bin\diff.exe"" -C 3 --color=auto ""%1"" ""%2""""");
	
	// Чуть более наглядоное сравнение с помощью утилиты WinMerge
	Настройки.Вставить("УтилитаСравнения", """C:\Program Files (x86)\WinMerge\WinMergeU.exe"" ""%1"" ""%2""");
	
	Настройки.Вставить("ПараметрыОформителяОтступов", Новый Структура());
	Настройки.ПараметрыОформителяОтступов.Вставить("ПустыеСтрокиСОтступами",           Истина);
	Настройки.ПараметрыОформителяОтступов.Вставить("Отступ",                           Строка(Символы.Таб));
	Настройки.ПараметрыОформителяОтступов.Вставить("РекурсивныеДополнительныеОтступы", Ложь);
	
	Настройки.Вставить("ПараметрыВыравниванияАргументов", Новый Структура());
	Настройки.ПараметрыВыравниванияАргументов.Вставить("Использовать", Истина);
	Настройки.ПараметрыВыравниванияАргументов.Вставить("КоличествоСтрокПодряд", 3);
	
	Возврат Настройки;
	
КонецФункции

Функция СпроситьПользователяДаНет(ТекстВопроса)
	
	Перем ОтветТекст;
	
	ВариантыОтветов = Новый Структура();
	ВариантыОтветов.Вставить("Да", Истина);
	ВариантыОтветов.Вставить("Нет", Ложь);
	ВариантыОтветов.Вставить("Yes", Истина);
	ВариантыОтветов.Вставить("No", Ложь);
	ВариантыОтветов.Вставить("Д", Истина);
	ВариантыОтветов.Вставить("Н", Ложь);
	ВариантыОтветов.Вставить("Y", Истина);
	ВариантыОтветов.Вставить("N", Ложь);
	
	ОтветПользователя = Неопределено;
	Пока ОтветПользователя = Неопределено Цикл
		
		ВвестиСтроку(ОтветТекст, ТекстВопроса + "(Да/Нет)", 3);
		Если ВариантыОтветов.Свойство(ОтветТекст, ОтветПользователя) Тогда
			Прервать;
		Иначе
			Сообщить("Непонятный ответ");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтветПользователя;
	
КонецФункции

Функция ИнформацияОМодификацииФайла()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФайла", Неопределено);
	Результат.Вставить("ИзмененныеСтроки", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФайлыДляОформления()
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	КомандаГит = Парсер.ОписаниеКоманды("git", "Вызывать команду git diff и оформлять только изменения в файлах *.bsl *.os");
	Парсер.ДобавитьПозиционныйПараметрКоманды(КомандаГит, "Каталог", "Каталог репозитория");
	Парсер.ДобавитьПозиционныйПараметрКоманды(КомандаГит, "Коммит", "Коммит с коротого начинается оформление");
	Парсер.ДобавитьКоманду(КомандаГит);
	
	КомандаФайлы = Парсер.ОписаниеКоманды("file", "Оформить все файлы *.bsl *.os в каталоге и подкаталогах");
	Парсер.ДобавитьПозиционныйПараметрКоманды(КомандаФайлы, "Каталог", "Каталог для оформления");
	Парсер.ДобавитьКоманду(КомандаФайлы);
	
	Попытка
		Результат = Парсер.Разобрать(АргументыКоманднойСтроки);
	Исключение
		Парсер.ВывестиСправкуПоКомандам();
		ЗавершитьРаботу(1);
	КонецПопытки;
	
	Если Результат["Команда"] = Неопределено Тогда
		
		Парсер.ВывестиСправкуПоКомандам();
		ЗавершитьРаботу(1);
		
	ИначеЕсли Результат.Команда = КомандаФайлы.Команда Тогда
		
		Если Результат.ЗначенияПараметров["Каталог"] = Неопределено Тогда
			Парсер.ВывестиСправкуПоКоманде(КомандаФайлы.Команда);
			ЗавершитьРаботу(1);
		КонецЕсли;
		
		Возврат НайтиФайлыРекурсивно(Результат.ЗначенияПараметров["Каталог"]);
		
	ИначеЕсли Результат.Команда = КомандаГит.Команда Тогда
		
		Если Результат.ЗначенияПараметров["Каталог"] = Неопределено Тогда
			Парсер.ВывестиСправкуПоКоманде("git");
			ЗавершитьРаботу(1);
		КонецЕсли;
		
		Коммит = Результат.ЗначенияПараметров["Коммит"];
		Коммит = ?(Коммит = Неопределено, "", Коммит);
		
		Возврат ПолучитьМодифицированныеФайлыGIT(Результат.ЗначенияПараметров["Каталог"], Коммит);
		
	КонецЕсли;
	
	Возврат Новый Массив();
	
КонецФункции

Функция НайтиФайлыРекурсивно(ПутьКФайлам)
	
	Файлы = НайтиФайлы(ПутьКФайлам, "*", Истина);
	Результат = Новый Массив();
	Для Каждого Файл Из Файлы Цикл
		Инф = ИнформацияОМодификацииФайла();
		Инф.ИмяФайла = Файл.ПолноеИмя;
		Результат.Добавить(Инф);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМодифицированныеФайлыGIT(КаталогРепозитория, Коммит = "")
	
	Результат = Новый Массив();
	
	//Измененные файлы
	ЛогГит = ПолучитьИмяВременногоФайла();
	КодВозврата = -1;
	ЗапуститьПриложение(СтрШаблон("cmd /C git diff -U0 %1 > ""%2""", Коммит, ЛогГит), КаталогРепозитория, Истина, КодВозврата);
	Если КодВозврата <> 0 Тогда
		
		Сообщить("Ошибка получения git diff");
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЧТ = Новый ЧтениеТекста(ЛогГит, КодировкаТекста.UTF8);
	
	Стр = ЧТ.ПрочитатьСтроку();
	
	ТекИнф = ИнформацияОМодификацииФайла();
	
	Пока Стр <> Неопределено Цикл
		
		Если Лев(Стр, 6) = "+++ b/" Тогда
			
			Если ТекИнф.ИмяФайла <> Неопределено Тогда
				Результат.Добавить(ТекИнф);
				ТекИнф = ИнформацияОМодификацииФайла();
			КонецЕсли;
			
			ТекИнф.ИмяФайла = КаталогРепозитория + "/" + Прав(Стр, СтрДлина(Стр) - 6);
			
		ИначеЕсли Лев(Стр, 2) = "@@" Тогда
			
			ИдентификаторИзменений = СтрРазделить(Стр, " ")[2];
			
			ИндексНовойСтроки = Неопределено;
			КоличествоНовыхСтрок = 1;
			Если Лев(ИдентификаторИзменений, 1) = "+" Тогда
				
				Подстроки = СтрРазделить(ИдентификаторИзменений, ",");
				ИндексНовойСтроки = Число(Прав(Подстроки[0], СтрДлина(Подстроки[0]) - 1));
				
				Если Подстроки.Количество() > 1 Тогда
					КоличествоНовыхСтрок = Число(Подстроки[1]);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИндексНовойСтроки <> Неопределено Тогда
				
				Если ТекИнф.ИзмененныеСтроки = Неопределено Тогда
					ТекИнф.ИзмененныеСтроки = Новый Массив();
				КонецЕсли;
				
				Для ц = 0 По КоличествоНовыхСтрок - 1 Цикл
					ТекИнф.ИзмененныеСтроки.Добавить(ИндексНовойСтроки + ц);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Стр = ЧТ.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Если ТекИнф.ИмяФайла <> Неопределено Тогда
		Результат.Добавить(ТекИнф);
		ТекИнф = ИнформацияОМодификацииФайла();
	КонецЕсли;
	
	//Новые файлы
	ЛогГит = ПолучитьИмяВременногоФайла();
	КодВозврата = -1;
	ЗапуститьПриложение("cmd /C git status -s > """ + ЛогГит + """", КаталогРепозитория, Истина, КодВозврата);
	Если КодВозврата <> 0 Тогда
		
		Сообщить("Ошибка получения git status");
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЧТ = Новый ЧтениеТекста(ЛогГит, КодировкаТекста.UTF8);
	
	Стр = ЧТ.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		
		Если Лев(Стр, 2) = "??" Тогда
			
			ЭлРезультата = ИнформацияОМодификацииФайла();
			ЭлРезультата.ИмяФайла = Прав(Стр, СтрДлина(Стр) - 3);
			
			Результат.Добавить(ЭлРезультата);
			
		КонецЕсли;
		
		Стр = ЧТ.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

ПодключитьСценарий("src\ОформительОтступов\Ext\ObjectModule.bsl", "ОформительОтступов");
ПодключитьСценарий("src\ОформительПробелов\Ext\ObjectModule.bsl", "ОформительПробелов");
ПодключитьСценарий("src\ЗаменаНеканоничныхКлючевыхСлов.os", "ЗаменаНеканоничныхКлючевыхСлов");
ПодключитьСценарий("src\ВыравниваниеАргументов\Ext\ObjectModule.bsl", "ВыравниваниеАргументов");

МодифицированныеФайлы = ПолучитьФайлыДляОформления();

Настройки = Настройки();

Парсер = Новый ПарсерВстроенногоЯзыка;

Для Каждого Инф Из МодифицированныеФайлы Цикл
	
	Если НРег(Прав(Инф.ИмяФайла, 4)) <> ".bsl"
		И НРег(Прав(Инф.ИмяФайла, 3)) <> ".os" Тогда
		
		Продолжить;
		
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(Инф.ИмяФайла, "UTF-8");
	Исходник = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Попытка
		
		ПлагинОформительОтступов = Новый ОформительОтступов;

		Плагины = Новый Массив;
		Плагины.Добавить(ПлагинОформительОтступов);
		Плагины.Добавить(Новый ОформительПробелов);
		Плагины.Добавить(Новый ЗаменаНеканоничныхКлючевыхСлов);
		
		ПараметрыПлагинов = Новый Соответствие;
		ПараметрыПлагинов[ПлагинОформительОтступов] = Настройки.ПараметрыОформителяОтступов;
		
		Парсер.Пуск(Исходник, Плагины, ПараметрыПлагинов);
		
		ИсправленныйИсходник = Парсер.ВыполнитьЗамены();
		Если ИсправленныйИсходник = Неопределено Тогда
			
			ИсправленныйИсходник = Исходник;
			
		КонецЕсли;
		
		Если Настройки.ПараметрыВыравниванияАргументов.Использовать Тогда
			
			// Использование данного плагина требует заново распарсить код
			Плагины = Новый Массив();
			ПлагинВыравниваниеАргументов = Новый ВыравниваниеАргументов;
			Плагины.Добавить(ПлагинВыравниваниеАргументов);
			ПараметрыПлагинов = новый Соответствие();
			ПараметрыПлагинов[ПлагинВыравниваниеАргументов] = Настройки.ПараметрыВыравниванияАргументов;

			Парсер.Пуск(ИсправленныйИсходник, Плагины, ПараметрыПлагинов);
			ИсправленныйИсходник2 = Парсер.ВыполнитьЗамены();
			Если ИсправленныйИсходник2 <> Неопределено Тогда
				
				ИсправленныйИсходник = ИсправленныйИсходник2;
				ИсправленныйИсходник2 = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Инф.ИзмененныеСтроки <> Неопределено Тогда
			
			МассивИсходник = СтрРазделить(Исходник, Строка(Символы.ПС), Истина);
			МассивИсправленный = СтрРазделить(ИсправленныйИсходник, Строка(Символы.ПС), Истина);
			
			Для Ц = 0 По МассивИсходник.Количество() - 1 Цикл
				
				Если Инф.ИзмененныеСтроки.Найти(ц + 1) = Неопределено Тогда
					МассивИсправленный[ц] = МассивИсходник[ц];
				КонецЕсли;
				
			КонецЦикла;
			
			ИсправленныйИсходник = СтрСоединить(МассивИсправленный,Строка(Символы.ПС));
			
		КонецЕсли;
		
		Если Исходник = ИсправленныйИсходник Тогда
			// исправлений небыло
			Продолжить;
		КонецЕсли;
		
		ЗаписьТекста = Новый ЗаписьТекста;
		ЗаписьТекста.Открыть(ИмяВременногоФайла, "UTF-8");
		ЗаписьТекста.Записать(ИсправленныйИсходник);
		ЗаписьТекста.Закрыть();
		
	Исключение
		
		Сообщить(СтрШаблон("Ошибка парсинга файла %1", Инф.ИмяФайла));
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Продолжить;
		
	КонецПопытки;
	
	ПерезаписатьФайл = Неопределено;
	Если Не Настройки.ИнтерактивныйРежимРаботы Тогда
		
		ПерезаписатьФайл = Истина;
		
	Иначе
		
		КомандаDiff = СтрШаблон(Настройки.УтилитаСравнения, Инф.ИмяФайла, ИмяВременногоФайла);
		ЗапуститьПриложение(КомандаDiff,, Истина);
		
		ТекстВопроса = "Применить изменения к файлу " + Инф.ИмяФайла + "?";
		ПерезаписатьФайл = СпроситьПользователяДаНет(ТекстВопроса);
		
	КонецЕсли;
	
	Если ПерезаписатьФайл Тогда
		
		ПереместитьФайл(Инф.ИмяФайла, Инф.ИмяФайла + ".tmp");
		ПереместитьФайл(ИмяВременногоФайла, Инф.ИмяФайла);
		УдалитьФайлы(Инф.ИмяФайла + ".tmp");
		
	КонецЕсли;
	
КонецЦикла;
