
#Использовать cmdline
#Использовать osparser

// Функция производит парсинг аргументов командной строки и возвращает настройки выполнения скрипта
//
Функция НастройкиВыполнения()
	
	Настройки = Новый Структура();
	
	// Информация о файлах для оформления
	Настройки.Вставить("ФайлыДляОформления",       Новый Массив());
	Настройки.Вставить("ИнтерактивныйРежимРаботы", Истина);
	Настройки.Вставить("КомандаСравненияФайлов",   Неопределено);
	Настройки.Вставить("НастройкиПлагинов",        Неопределено);
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	Парсер.ДобавитьПараметрФлаг("-y", "Отключает интерактивный режим. На все вопросы отвечает ""Да""", Истина);
	Парсер.ДобавитьИменованныйПараметр("--diff", "Команда сравнения файлов. При интерактивном режиме работы будет вызвана чтобы показать пользователю примененные оформителем изменения.", Истина);
	Парсер.ДобавитьИменованныйПараметр("--plugin-settings", "Путь к файлу настроек плагинов. По умолчанию <Каталог>\bslpretty.json", Истина);
	
	КомандаГит = Парсер.ОписаниеКоманды("git", "Вызывать команду git diff и оформлять только изменения в файлах *.bsl *.os");
	Парсер.ДобавитьПозиционныйПараметрКоманды(КомандаГит, "Каталог", "Каталог репозитория");
	Парсер.ДобавитьПозиционныйПараметрКоманды(КомандаГит, "Коммит", "Коммит с коротого начинается оформление");
	Парсер.ДобавитьКоманду(КомандаГит);
	
	КомандаФайлы = Парсер.ОписаниеКоманды("file", "Оформить все файлы *.bsl *.os в каталоге и подкаталогах");
	Парсер.ДобавитьПозиционныйПараметрКоманды(КомандаФайлы, "Каталог", "Каталог для оформления");
	Парсер.ДобавитьКоманду(КомандаФайлы);
	
	Попытка
		Результат = Парсер.Разобрать(АргументыКоманднойСтроки);
	Исключение
		Парсер.ВывестиСправкуПоКомандам();
		ЗавершитьРаботу(1);
	КонецПопытки;
	
	Если Результат["Команда"] = Неопределено Тогда
		
		Парсер.ВывестиСправкуПоКомандам();
		ЗавершитьРаботу(1);
		
	ИначеЕсли Результат.Команда = КомандаФайлы.Команда Тогда
		
		Если Результат.ЗначенияПараметров["Каталог"] = Неопределено Тогда
			Парсер.ВывестиСправкуПоКоманде(КомандаФайлы.Команда);
			ЗавершитьРаботу(1);
		КонецЕсли;
		
		Настройки.ФайлыДляОформления = НайтиФайлыРекурсивно(Результат.ЗначенияПараметров["Каталог"]);
		
	ИначеЕсли Результат.Команда = КомандаГит.Команда Тогда
		
		Если Результат.ЗначенияПараметров["Каталог"] = Неопределено Тогда
			Парсер.ВывестиСправкуПоКоманде("git");
			ЗавершитьРаботу(1);
		КонецЕсли;
		
		Коммит = Результат.ЗначенияПараметров["Коммит"];
		Коммит = ?(Коммит = Неопределено, "", Коммит);
		
		Настройки.ФайлыДляОформления = ПолучитьМодифицированныеФайлыGIT(Результат.ЗначенияПараметров["Каталог"], Коммит);
		
	КонецЕсли;
	// Настройки интерактивного режима
	Если Результат.ЗначенияПараметров["-y"] Тогда
		
		Настройки.ИнтерактивныйРежимРаботы = Ложь;
		
	Иначе
		
		Если Результат.ЗначенияПараметров["--diff"] <> Неопределено Тогда
			
			Настройки.КомандаСравненияФайлов = Результат.ЗначенияПараметров["--diff"];
			
		Иначе
			
			Настройки.КомандаСравненияФайлов = КомандаСравненияФайлов();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// настройки плагинов
	ПутьКФайлуНастроек = Неопределено;
	Если Результат.ЗначенияПараметров["--plugin-settings"] = Неопределено Тогда
		ПутьКФайлуНастроек = ОбъединитьПути(Результат.ЗначенияПараметров["Каталог"], "bslpretty.json");
	Иначе
		ПутьКФайлуНастроек = Результат.ЗначенияПараметров["--plugin-settings"];
	КонецЕсли;
	
	ФайлНастроек = Новый Файл(ПутьКФайлуНастроек);
	
	Если ФайлНастроек.Существует() Тогда
		
		Чтение = Новый ЧтениеJSON();
		Чтение.ОткрытьФайл(ПутьКФайлуНастроек, КодировкаТекста.UTF8);

		Настройки.НастройкиПлагинов = ПрочитатьJSON(Чтение).НастройкиПлагинов;
		
	Иначе
		
		Сообщить("Не могу прочитать настройки плагинов " + ПутьКФайлуНастроек);
		ЗавершитьРаботу(1);
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция КомандаСравненияФайлов()
	
	Утилита = НайтиУтилитуСравненияWinMerge();
	Если Утилита <> Неопределено Тогда
		Возврат """" + Утилита + """ ""%1"" ""%2""";
	КонецЕсли;
	
	Утилита = НайтиУтилитуСравненияDiff();
	Если Утилита <> Неопределено Тогда
		Возврат "cmd /K """ + Утилита + """  -C 3 --color=auto ""%1"" ""%2""";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиУтилитуСравненияWinMerge()
	
	ВозможныеПутиВинМердже = Новый Массив();
	ВозможныеПутиВинМердже.Добавить("C:\Program Files (x86)\WinMerge\WinMergeU.exe");
	ВозможныеПутиВинМердже.Добавить("C:\Program Files\WinMerge\WinMergeU.exe");
	
	Для Каждого Путь Из ВозможныеПутиВинМердже Цикл
		
		Ф = Новый Файл(Путь);
		Если Ф.Существует() Тогда
			Возврат Путь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиУтилитуСравненияDiff()
	
	ВозможныеПутиДифф = Новый Массив();
	ВозможныеПутиДифф.Добавить("C:\Program Files\Git\usr\bin\diff.exe");
	ВозможныеПутиДифф.Добавить("C:\Program Files (x86)\Git\usr\bin\diff.exe");
	
	Для Каждого Путь Из ВозможныеПутиДифф Цикл
		
		Ф = Новый Файл(Путь);
		Если Ф.Существует() Тогда
			Возврат Путь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция СпроситьПользователяДаНет(ТекстВопроса)
	
	Перем ОтветТекст;
	
	ВариантыОтветов = Новый Структура();
	ВариантыОтветов.Вставить("Да", Истина);
	ВариантыОтветов.Вставить("Нет", Ложь);
	ВариантыОтветов.Вставить("Yes", Истина);
	ВариантыОтветов.Вставить("No", Ложь);
	ВариантыОтветов.Вставить("Д", Истина);
	ВариантыОтветов.Вставить("Н", Ложь);
	ВариантыОтветов.Вставить("Y", Истина);
	ВариантыОтветов.Вставить("N", Ложь);
	
	ОтветПользователя = Неопределено;
	Пока ОтветПользователя = Неопределено Цикл
		
		ВвестиСтроку(ОтветТекст, ТекстВопроса + "(Да/Нет)", 3);
		Если ВариантыОтветов.Свойство(ОтветТекст, ОтветПользователя) Тогда
			Прервать;
		Иначе
			Сообщить("Непонятный ответ");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтветПользователя;
	
КонецФункции

Функция ИнформацияОМодификацииФайла()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФайла", Неопределено);
	Результат.Вставить("ИзмененныеСтроки", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция НайтиФайлыРекурсивно(ПутьКФайлам)
	
	Файлы = НайтиФайлы(ПутьКФайлам, "*", Истина);
	Результат = Новый Массив();
	Для Каждого Файл Из Файлы Цикл
		Инф = ИнформацияОМодификацииФайла();
		Инф.ИмяФайла = Файл.ПолноеИмя;
		Результат.Добавить(Инф);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМодифицированныеФайлыGIT(КаталогРепозитория, Коммит = "")
	
	Результат = Новый Массив();
	
	//Измененные файлы
	ЛогГит = ПолучитьИмяВременногоФайла();
	КодВозврата = -1;
	ЗапуститьПриложение(СтрШаблон("cmd /C git diff -U0 %1 > ""%2""", Коммит, ЛогГит), КаталогРепозитория, Истина, КодВозврата);
	Если КодВозврата <> 0 Тогда
		
		Сообщить("Ошибка получения git diff");
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЧТ = Новый ЧтениеТекста(ЛогГит, КодировкаТекста.UTF8);
	
	Стр = ЧТ.ПрочитатьСтроку();
	
	ТекИнф = ИнформацияОМодификацииФайла();
	
	Пока Стр <> Неопределено Цикл
		
		Если Лев(Стр, 6) = "+++ b/" Тогда
			
			Если ТекИнф.ИмяФайла <> Неопределено Тогда
				Результат.Добавить(ТекИнф);
				ТекИнф = ИнформацияОМодификацииФайла();
			КонецЕсли;
			
			ТекИнф.ИмяФайла = КаталогРепозитория + "/" + Прав(Стр, СтрДлина(Стр) - 6);
			
		ИначеЕсли Лев(Стр, 2) = "@@" Тогда
			
			ИдентификаторИзменений = СтрРазделить(Стр, " ")[2];
			
			ИндексНовойСтроки = Неопределено;
			КоличествоНовыхСтрок = 1;
			Если Лев(ИдентификаторИзменений, 1) = "+" Тогда
				
				Подстроки = СтрРазделить(ИдентификаторИзменений, ",");
				ИндексНовойСтроки = Число(Прав(Подстроки[0], СтрДлина(Подстроки[0]) - 1));
				
				Если Подстроки.Количество() > 1 Тогда
					КоличествоНовыхСтрок = Число(Подстроки[1]);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИндексНовойСтроки <> Неопределено Тогда
				
				Если ТекИнф.ИзмененныеСтроки = Неопределено Тогда
					ТекИнф.ИзмененныеСтроки = Новый Массив();
				КонецЕсли;
				
				Для ц = 0 По КоличествоНовыхСтрок - 1 Цикл
					ТекИнф.ИзмененныеСтроки.Добавить(ИндексНовойСтроки + ц);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Стр = ЧТ.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Если ТекИнф.ИмяФайла <> Неопределено Тогда
		Результат.Добавить(ТекИнф);
		ТекИнф = ИнформацияОМодификацииФайла();
	КонецЕсли;
	
	ЧТ.Закрыть();
	УдалитьФайлы(ЛогГит);
	
	//Новые файлы
	ЛогГит = ПолучитьИмяВременногоФайла();
	КодВозврата = -1;
	ЗапуститьПриложение("cmd /C git status -s > """ + ЛогГит + """", КаталогРепозитория, Истина, КодВозврата);
	Если КодВозврата <> 0 Тогда
		
		Сообщить("Ошибка получения git status");
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЧТ = Новый ЧтениеТекста(ЛогГит, КодировкаТекста.UTF8);
	
	Стр = ЧТ.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		
		Если Лев(Стр, 2) = "??" Тогда
			
			ЭлРезультата = ИнформацияОМодификацииФайла();
			ЭлРезультата.ИмяФайла = Прав(Стр, СтрДлина(Стр) - 3);
			
			Результат.Добавить(ЭлРезультата);
			
		КонецЕсли;
		
		Стр = ЧТ.ПрочитатьСтроку();
		
	КонецЦикла;
	
	ЧТ.Закрыть();
	УдалитьФайлы(ЛогГит);
	
	Возврат Результат;
	
КонецФункции

Функция Оформить(Исходник, НастройкиПлагинов)
	
	Парсер = Новый ПарсерВстроенногоЯзыка;
	Плагины = Новый Массив();
	ПараметрыПлагинов = Новый Соответствие();
	
	НазванияПлагинов = Новый Массив();
	НазванияПлагинов.Добавить("ОформительОтступов");
	НазванияПлагинов.Добавить("ОформительПробелов");
	НазванияПлагинов.Добавить("ЗаменаНеканоничныхКлючевыхСлов");
	
	Для Каждого НазваниеПлагина Из НазванияПлагинов Цикл
		Если НастройкиПлагинов[НазваниеПлагина].Включен Тогда
			
			Если НазваниеПлагина = "ОформительОтступов" Тогда
				Плагин = Новый ОформительОтступов();
			ИначеЕсли НазваниеПлагина = "ОформительПробелов" Тогда
				Плагин = Новый ОформительПробелов();
			ИначеЕсли НазваниеПлагина = "ЗаменаНеканоничныхКлючевыхСлов" Тогда
				Плагин = Новый ЗаменаНеканоничныхКлючевыхСлов();
			КонецЕсли;
			
			Плагины.Добавить(Плагин);
			ПараметрыПлагина = Новый Структура();
			Для Каждого КлючИЗначение Из НастройкиПлагинов[НазваниеПлагина] Цикл
				ПараметрыПлагина.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			
			ПараметрыПлагинов[Плагин] = ПараметрыПлагина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Парсер.Пуск(Исходник, Плагины, ПараметрыПлагинов);
	
	ИсправленныйИсходник = Парсер.ВыполнитьЗамены();
	Если ИсправленныйИсходник = Неопределено Тогда
		
		ИсправленныйИсходник = Исходник;
		
	КонецЕсли;
	
	Если НастройкиПлагинов["ВыравниваниеАргументов"].Включен Тогда
		
		// Использование данного плагина требует заново распарсить код
		Плагины = Новый Массив();
		ПлагинВыравниваниеАргументов = Новый ВыравниваниеАргументов;
		Плагины.Добавить(ПлагинВыравниваниеАргументов);
		ПараметрыПлагинов = Новый Соответствие();
		ПараметрыПлагина = Новый Структура("КоличествоСтрокПодряд");
		Для Каждого КлючИЗначение Из НастройкиПлагинов["ВыравниваниеАргументов"] Цикл
			ПараметрыПлагина.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;		
		ПараметрыПлагинов[ПлагинВыравниваниеАргументов] = НастройкиПлагинов.ВыравниваниеАргументов;
		
		Парсер.Пуск(ИсправленныйИсходник, Плагины, ПараметрыПлагинов);
		ИсправленныйИсходник2 = Парсер.ВыполнитьЗамены();
		Если ИсправленныйИсходник2 <> Неопределено Тогда
			
			ИсправленныйИсходник = ИсправленныйИсходник2;
			ИсправленныйИсходник2 = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИсправленныйИсходник;

КонецФункции

ПодключитьСценарий("src\ОформительОтступов\Ext\ObjectModule.bsl", "ОформительОтступов");
ПодключитьСценарий("src\ОформительПробелов\Ext\ObjectModule.bsl", "ОформительПробелов");
ПодключитьСценарий("src\ЗаменаНеканоничныхКлючевыхСлов.os", "ЗаменаНеканоничныхКлючевыхСлов");
ПодключитьСценарий("src\ВыравниваниеАргументов\Ext\ObjectModule.bsl", "ВыравниваниеАргументов");

Настройки = НастройкиВыполнения();

Для Каждого Инф Из Настройки.ФайлыДляОформления Цикл
	
	Если НРег(Прав(Инф.ИмяФайла, 4)) <> ".bsl"
		И НРег(Прав(Инф.ИмяФайла, 3)) <> ".os" Тогда
		
		Продолжить;
		
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(Инф.ИмяФайла, "UTF-8");
	Исходник = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Попытка
		
		ИсправленныйИсходник = Оформить(Исходник, Настройки.НастройкиПлагинов);
		
		Если Исходник = ИсправленныйИсходник Тогда
			// исправлений небыло
			Продолжить;
		КонецЕсли;
		
		ЗаписьТекста = Новый ЗаписьТекста;
		ЗаписьТекста.Открыть(ИмяВременногоФайла, "UTF-8");
		ЗаписьТекста.Записать(ИсправленныйИсходник);
		ЗаписьТекста.Закрыть();
		
	Исключение
		
		Сообщить(СтрШаблон("Ошибка парсинга файла %1", Инф.ИмяФайла));
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Продолжить;
		
	КонецПопытки;
	
	ПерезаписатьФайл = Неопределено;
	Если Не Настройки.ИнтерактивныйРежимРаботы Тогда
		
		ПерезаписатьФайл = Истина;
		
	Иначе
		
		КомандаDiff = СтрШаблон(Настройки.КомандаСравненияФайлов, Инф.ИмяФайла, ИмяВременногоФайла);
		ЗапуститьПриложение(КомандаDiff,, Истина);
		
		ТекстВопроса = "Применить изменения к файлу " + Инф.ИмяФайла + "?";
		ПерезаписатьФайл = СпроситьПользователяДаНет(ТекстВопроса);
		
	КонецЕсли;
	
	Если ПерезаписатьФайл Тогда
		
		ПереместитьФайл(Инф.ИмяФайла, Инф.ИмяФайла + ".tmp");
		ПереместитьФайл(ИмяВременногоФайла, Инф.ИмяФайла);
		УдалитьФайлы(Инф.ИмяФайла + ".tmp");
		
	КонецЕсли;
	
КонецЦикла;
