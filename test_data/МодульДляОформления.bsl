///
// Комментарий
///

#Область ИмяОбласти

Процедура ТестУнарногоМинуса(Парам)
	
	//унарный минус
	Результат = - Парам;
	Результат = Парам + -Парам;
	СтруктураПараметров.Вставить("P_Prefix", - 1);
	Соответствие[-1] = -1;
	Результат = -1;

	// вычитание
	Результат = 2 - 1;
	Результат = '20241006' - 1;
	Результат = Массив[0]-1;

КонецПроцедуры

Функция     ТестРасстановкиПробелов(Парам1,Парам2 ,Парам3 , Парам4)Экспорт    //Комментарий
	
	Результат=  Парам1 +Парам2* (Парам3 + Парам1 / Парам2);
	
	Результат =?(Парам2=0,Неопределено, Парам1/Парам2);
	
	Если  Парам1<= Парам2  И Парам1 >=Парам2
		Или ( Не (Парам1<Парам2) И Не (Парам2<Парам1))Тогда
		
		Сообщить( "Парам1 = Парам2");
		
	КонецЕсли;
	Возврат  Парам4;
	
КонецФункции

Процедура Баг3()
	
	Результат = ?(АкцияСсылка=неопределено, Истина, Ложь);
	АкцияСсылка=неопределено;
	
КонецПроцедуры

Процедура ПропущеннаяТочкаСЗапятой()

	Если Истина Тогда
		Результат = Результат + 1
	Иначе
		Результат = Результат + 2
	КонецЕсли

КонецПроцедуры

// Результат оформления расстановки отступов завистит от настроек плагина
// Попробуйте РекурсивныеДополнительныеОтступы = Истина
Процедура ТестРасстановкиОтступов1(Парам1, Парам2)
	
	ОбщегоНазначения.СообщитьПользователю(
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Число %1 нельзя делить на %2'"),
	Парам1, Парам2),
	"Парам1", "Объект");
	
КонецПроцедуры

Функция ТестРасстановкиОтступов2(Парам1, Парам2, Парам3) Экспорт // Тест комментария
	
    Результат = Парам1 + Парам2*Парам3;
	
    Для ц=1 по 100500 Цикл
	Если Результат > Парам3
		ИЛИ Результат < Парам2 Тогда
	
		Попытка
		
	Возврат Парам1/Парам2;
			
		Исключение
		#Если Клиент Тогда
		//Сообщим пользователю, что на ноль делить тельзя
			ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Число %1 нельзя делить на %2'"),
			Парам1, Парам2),
			"Парам1", "Объект");
			#КонецЕсли
		КонецПопытки;
	ИначеЕсли Результат = Парам3 Тогда
		Возврат Парам3;
	КонецЕсли;
КонецЦикла;
	Возврат Результат;

КонецФункции

Процедура ТестОформленияКодаЗапроса() Экспорт 
	
	Запрос=новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Спраочник.Номенклатура";
	
КонецПроцедуры

#КонецОбласти

Процедура ТестОформителяОтступов(Парам1, Парам2)
	
	#Область АргументыДолжныВыравниваться
	
	Результат = новый Структура("НачалоСтроки,КонецСтроки,Лирика");
	Результат.НачалоСтроки = 1;
	Результат.КонецСтроки = 2;
	Результат.лирика = 3;
	
	Для ц=1 по 10 цикл
	
		Стр = новый Структура();
		Стр.Вставить("Результат1", п);
		Стр.Вставить("Резу", п1);
		Стр.Вставить("Рез", п2);
	
	КонецЦикла;
	
	Запрос = новый Запрос();
	Запрос.Параметры.Вставить("П1", 1);
	Запрос.Параметры.Вставить("БольшойПараметр2", 2);
	Запрос.Параметры.Вставить("Парам3", 2);
	
	#КонецОбласти
	
	#Область АргументыНеДолжныВыравниваться
	// Баг #1
	Результат = новый Структура("НачалоСтроки,КонецСтроки,Лирика");
	Если Истина Тогда
		
		Результат.НачалоСтроки = 1;
		Результат.КонецСтроки = 2;
		
	Иначе
		
		Результат.лирика = 3;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры